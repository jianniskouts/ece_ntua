/************************************************************************
 *
 * Name        : Eleni Psaroudaki
 * ID          : 03112080
 * Exercise    : ChemÎ¹cal Waste
 *
 *************************************************************************/


#include <stdio.h>
#include <stdlib.h>


#define BSIZE 1<<15

char buffer[BSIZE];
long bpos = 0L, bsize = 0L;

long readLong()
{
    long d = 0L, x = 0L;
    char c;

    while (1)  {
        if (bpos >= bsize) {
            bpos = 0;
            if (feof(stdin)) return x;
            bsize = fread(buffer, 1, BSIZE, stdin);
        }
        c = buffer[bpos++];
        if (c >= '0' && c <= '9') { x = x*10 + (c-'0'); d = 1; }
        else if (d == 1) return x;
    }
    return -1;
}

int main(void){
    long long int **energy = NULL;
    long long int **energy_comb = NULL;
    long long int **comb = NULL;
    long long int min;
    int N,K;
    int i, j, k;

    min = scanf("%d %d", &N, &K);
    energy = (long long int **)malloc(N *sizeof(long long int *));
    if (energy == NULL) return 1;
    for (i = 0; i < N; ++i){
        energy[i] = (long long int *)malloc(N *sizeof(long long int));
        if (energy[i] == NULL) return 1;
        energy[i][i] = 0;

        for(j = i+1; j < N; ++j){
            energy[i][j]=readLong();
            energy[i][j] = energy[i][j] + energy[i][j-1];
        }
    }
    energy_comb = (long long int **)malloc(N *sizeof(long long int *));
    if (energy_comb == NULL) return 1;

    for (i = 0; i <= N-1 ; ++i){
        energy_comb[i] =(long long int *) malloc(N *sizeof(long long int));
        if (energy_comb[i] == NULL) return 1;

        energy_comb[i][i] = 0;
    }
    for (j = N-1; j >=0 ; --j){
        // we need element j from rows i to j-1 for the combination i to j
        // we use bottom up to create energy combinations
        for(i = j-1; i >= 0; --i){
            energy_comb[i][j] = energy_comb[i+1][j] + energy[i][j];
        }
    }
    // for only one bottle
    if (K==1) {
        printf("%lld\n", energy_comb [0][N-1]);
    }
    else{
        for(i=0; i <= N; ++i){
            free(energy[i]);
        }
        free(energy);
        comb = (long long int **)malloc(N *sizeof(long long int *));
        if (comb == NULL) return 1;
        for (j = 0; j < N; ++j){
            comb[j] = (long long int *)malloc(K *sizeof(long long int));
            if (comb[j] == NULL) return 1;
            // energy for using till j elemenent
            comb[j][0] = energy_comb[0][j];
        }
        for (k = 1; k < K; ++k){
            for (j = 1; j < N; ++j){
                min = comb[k-1][k-1] + energy_comb[k][N-1];
                for (i = j-1; i >= 0; --i){
                    if ((comb[i][k-1] + energy_comb[i+1][j]) < min){
                        min = comb[i][k-1] + energy_comb[i+1][j];
                    }
                    if (energy_comb[i+1][j]>min)
                        break;
                }
                comb[j][k] = min;
            }
        }

        printf("%lld\n", comb[N-1][K-1]);
    }

    return 0;
}
